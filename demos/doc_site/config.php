<?php

/**
 * 全局的配置
 */
$config = [

	// 指定站点映射关系，只在根配置下有效，default 表示未指出的站点，如未设置 default 将拒绝不在列表的域名进行访问
	'SITE' => [
		'msvc.top'			=>	'web',
		'www.msvc.top'		=>	'web',
		'admin.msvc.top'	=>	'admin',
		'm.msvc.top'		=>	'm',
// 		'default'			=>	'web',
	],

	// 指定某个站点的运行模式，这个站点将会忽略入口而直接运行指定模式，可选项：MSVC、MVC、MS
// 	'MODE' => [
// 		'app'				=>	'MS',
// 	],

	// 对URL进行 Rewrite，只在根配置下有效，简单的正则表达式替换
// 	'REWRITE' => [
// 		'www\.xxxx\.com/aaa/(.+)'	=>	'www.xxxx.com/bbb/\1.html',
// 	],

	// View 在预编译时进行替换，例如 res.xxxx.xxx 资源路径的替换，简单的正则表达式替换
// 	'VIEW_REPLACE' => [
// 		'res\.msvc\.top'	=>	'res.top.msvc.net',
// 	],

	// 指定数据库连接信息，根据这个设置会自动产生默认的 Model 层，密码请用 base64 编码，在此配置的数据库信息对所有站点有效
// 	'DB' => [
//         'xxxx'	=> [ 'mysql:host=localhost;dbname=test', 'xxxx', 'dGVzdA==' ]
// 	],

	// View 缓存的路径，Windows下默认为 c:/_views/，*nix下默认为 /tmp/_views/，请保持最后的 /
// 	'VIEW_CACHE_PATH' => '/tmp/_views/',

	// 是否禁用 View 缓存，但是依然会在 VIEW_CACHE_PATH 下产生中间文件，只是不在检查原文件是否修改
// 	'DISABLE_VIEW_CACHE'	=> true,

	// 是否允许 MSVC 四层之间随意访问，默认 C 能否访问 S、C、V， S 能访问 S、M， M 只能访问 M， V 无法访问任何层（除了用引用标签引用其他View）
// 	'ENABLE_MSVC_CROSS'		=> true,

	// 设置视图标签语法，每个站点可以配置不同的语法
// 	默认的 View 标签配置，默认配置是一种以注释为主 方便前端开发人员查看和编辑的，检查比较宽松的表达式中允许出现对数组、全局变量 甚至调用函数、方法
// 	'VIEW_TAG' => [
// 		'<!--\s*@(.+?)\s*-->', 				// 嵌套
// 		'<!--\s*#(.+?)\s*-->', 				// 循环开始
// 		'<!--\s*/(.*?)-->', 				// 循环结束
// 		'<([\w\.]*?:\w+?)\s*(.*?)>', 		// 自定义标签开始
// 		'</(\w*?):(\w+?)\s*>', 				// 自定义标签结束
// 		'<!--\s*if\s+(.+?)\s*-->', 			// 条件开始
// 		'<!--\s*/if(.*?)-->', 				// 条件结束
// 		'<!--\s*else\s*-->', 				// else
// 		'<!--\s*else\s*if\s+(.+?)\s*-->', 	// else if
// 		'{(.+?\\?.+?\\:.+?)}', 				// 三目运算
// 		'{\$(.+?)}', 						// 变量
// 		'{#(.+?)}'							// 多语言
// 	],
	
// 	这是一个检查比较严格的版本，禁止出现数组、全局变量，禁止对函数、方法的调用
// 	'VIEW_TAG' => [
// 		'<!--\s*@([^[(:]+?)\s*-->', 			// 嵌套
// 		'<!--\s*#(\w+?)\s*-->', 				// 循环开始
// 		'<!--\s*/(.*?)-->', 					// 循环结束
// 		'<([\w\.]*?:\w+?)\s*(.*?)>', 			// 自定义标签开始
// 		'</(\w*?):(\w+?)\s*>', 					// 自定义标签结束
// 		'<!--\s*if\s+([^[(:]+?)\s*-->', 		// 条件开始
// 		'<!--\s*/if(.*?)-->', 					// 条件结束
// 		'<!--\s*else\s*-->', 					// else
// 		'<!--\s*else\s*if\s+([^[(:]+?)\s*-->', 	// else if
// 		'{([^[(:]+?\\?[^[(:]+?\\:[^[(:]+?)}', 	// 三目运算
// 		'{\$(\w+?)}', 							// 变量
// 		'{#(\w+?)}'								// 多语言
// 	],
	
// 	这是一个类似 ThinkPHP 的风格
// 	'VIEW_TAG' => [
// 		'<include file=[\'"]\s*@(.+?)\s*[\'"](.*?)>', 	// 嵌套
// 		'<volist name=[\'"]\s*#(.+?)\s*[\'"](.*?)>', 	// 循环开始
// 		'</volist(.*?)>', 								// 循环结束
// 		'<([\w\.]*?:\w+?)\s*(.*?)>', 					// 自定义标签开始
// 		'</(\w*?):(\w+?)\s*>', 							// 自定义标签结束
// 		'<if\s+(.+?)>', 								// 条件开始
// 		'</if(.*?)>', 									// 条件结束
// 		'<else>', 										// else
// 		'<elseif\s+(.+?)>', 							// else if
// 		'{(.+?\\?.+?\\:.+?)}', 							// 三目运算
// 		'{\$(.+?)}', 									// 变量
// 		'{#(.+?)}'										// 多语言
// 	],

//	各层路径设置，每个站点可以有不同的配置，使用 / 开头表示从项目根目录开始的绝对路径
// 	'PATH' => [
// 		'M'	=> '_m',
// 		'S'	=> '_s',
// 		'V'	=> '_v',
// 		'C'	=> '_c',
// 	],

	// 站点引用的模块列表，暂未实现
// 	'MODULE' => [ 'cms' ],

	// 配置某个包下的 Service 从其他服务器调用
// 	'SERVICE' => [
// 		'xx.aa.'	=>	'http://api.xxxx.com/'
// 	],

	// 注册一个入口处的回调，只在根配置下有效，允许修改 url（在REWRITE配置执行之后）
// 	'ONREWRITE' => function( $url ){
// 		return $url;
// 	},

// 请求进入时执行，如果存在返回值则使用返回值结束当前请求
// 	'ONIN' => function( $data ){
// 		return $data;
// 	},

	// 注册一个请求结束时的回调，所有站点可以单独配置，根配置下的回调会最后执行，可以再此对要输出的数据进行处理
// 	'ONOUT' => function( $data ){
// 		return $data;
// 	},

	// 注册一个错误处理事件，所有站点可以单独配置，任何错误或异常发生时会依次调用，未设置时默认的错误处理为直接在页面上打印错误信息
// 	'ONERROR' => function( $err ){
// 	},

];
